import React, { useState, useEffect } from 'react';
import Link from 'next/link';
import { stringify } from 'querystring';

const VulnerabilityDemo: React.FC = () => {
   const [inputText, setInputText] = useState<string>('');
   const [inputText2, setInputText2] = useState<string>('');
   const [result, setResult] = useState<string>('');
   const [vulnerabilityEnabled, setVulnerabilityEnabled] = useState<boolean>(false);
   const [vulnerabilityEnabled2, setVulnerabilityEnabled2] = useState<boolean>(false);
   const [token, setToken] = useState<string>('');
   const [isChecked, setIsChecked] = useState<boolean>(false);


   useEffect(() => {
      const visited = localStorage.getItem('visited');
      if (!visited) {
         localStorage.setItem('visited', 'true');
         window.location.reload();
      }
   }, []);

   const handleButtonClick = () => {
      const userInput = inputText;
      const outputDiv = document.getElementById('validation');

      if (outputDiv) {
         if (vulnerabilityEnabled) {
            // Ako je omogućena ranjivost, postavite uneseni HTML
            outputDiv.innerHTML = `<div>${userInput}</div>`;

            // Izvršavanje skripti pomoću eval
            const scripts = Array.from(outputDiv.getElementsByTagName('script'));
            scripts.forEach(script => {
               try {
                  eval(script.innerHTML);
               } catch (error) {
                  console.error('Error executing script:', error);
               }
            });
         } else {
            // Ako nije omogućena ranjivost, provjerite je li unesen HTML
            if (userInput.includes('<script>')) {
               // Ispisi error jer ne želimo izvršavati skripte
               outputDiv.innerHTML = `<div>Error: Script tags are not allowed when vulnerability is disabled.</div>`;
            } else {
               // Postavite uneseni tekst bez skripti
               outputDiv.innerHTML = `<div>${userInput}</div>`;
            }
         }
      }
   };



   const handleLogout = () => {

      localStorage.clear();
      window.location.reload();

   };

   useEffect(() => {

      if (typeof window !== 'undefined') {
         if (!localStorage.getItem('vulnerabilityEnabled')) {
            localStorage.setItem('vulnerabilityEnabled', 'false');
         }
         if (!localStorage.getItem('token')) {
            setToken('');
         } else {
            setToken(String(localStorage.getItem('token')));
         }
         const savedVulnerabilityEnabled = localStorage.getItem('vulnerabilityEnabled');
         if (savedVulnerabilityEnabled) {
            setVulnerabilityEnabled(savedVulnerabilityEnabled === 'true');
         }
      }
   }, []);

   useEffect(() => {
      const savedVulnerabilityEnabled = JSON.parse(String(localStorage.getItem('vulnerabilityEnabled')));
      if (savedVulnerabilityEnabled !== null) {
         setVulnerabilityEnabled2(savedVulnerabilityEnabled);
      }
   }, []);


   const handleCheckboxChange = () => {
      const newValue = !vulnerabilityEnabled2;
      setVulnerabilityEnabled2(newValue);
      localStorage.setItem('vulnerabilityEnabled', JSON.stringify(newValue));
   };



   return (
      <div>
         {token != '' &&
            <button onClick={handleLogout} className="buttonLogout">
               Logout
            </button>
         }


         <h1 className="title">Welcome!</h1>
         <div className="bigContainer">
            <div className="container">
               <h1 className="title">Cross-site scripting (XSS)</h1>
               <h5>
                  Omogućen unos teksta koji se zatim koristi kao JavaScript kod koji se izvršava u pregledniku. Ako je omogućena ranjivost,
                  uneseni tekst će biti korišten za stvaranje novog script elementa gdje će se pojaviti alert.
                  Upišite &lt;script&gt;alert(&quot;XSS attack&quot;);&lt;/script&gt;.
               </h5>

               <h3 >Enter your name:</h3>
               <input
                  type="text"
                  value={inputText}
                  onChange={(e) => setInputText(e.target.value)}
                  placeholder="Enter text..."
               />
               <div>
                  <label>
                     Enable Vulnerability:
                     <input
                        type="checkbox"
                        checked={vulnerabilityEnabled}
                        onChange={() => setVulnerabilityEnabled(!vulnerabilityEnabled)}
                     />
                  </label>
               </div>
               <div id="validation"></div>
               <button onClick={handleButtonClick}>Submit</button>
            </div>
            <div className="container">
               <h1 className="title">Broken Access Control</h1>
               <h5>
                  Omogućuje korisnicima da pristupe ili manipuliraju podacima za koje nisu autorizirani.
                  U kontekstu ovog zadatka, to znači da korisnik može dobiti pristup
                  stranicama koje su namijenjene samo za administratore.
               </h5>
               <h5>
                  Dva su korisnika:<h5>1. username:&quot;petra&quot;, password: &quot;12345678&quot;</h5>
                  <h5> 2. username:&quot;admin&quot;, password: &quot;12345678&quot;.</h5>

                  Admin ima dopuštenje stranici /admin, user petra nema.
               </h5>
               <div>
                  <label>
                     Enable Vulnerability:
                     <input
                        type="checkbox"
                        checked={vulnerabilityEnabled2}
                        onChange={handleCheckboxChange}
                     />
                  </label>
               </div>
               <div id="validation"></div>
               <h3>Please login here: <Link href="/login">Login</Link></h3>
               <h3>Only for admin: <Link href="/admin">Admin Page</Link></h3>


            </div>
         </div>

      </div >
   );
};

export default VulnerabilityDemo;
